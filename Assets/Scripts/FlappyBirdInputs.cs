//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Resources/Input/FlappyBirdInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FlappyBirdInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FlappyBirdInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FlappyBirdInputs"",
    ""maps"": [
        {
            ""name"": ""Flappy Bird"",
            ""id"": ""e4a533a1-98e6-4064-839a-f6e9bd2b18d1"",
            ""actions"": [
                {
                    ""name"": ""Flap"",
                    ""type"": ""Button"",
                    ""id"": ""c3ccdb7b-dec7-4224-a49c-70b4acbdf27c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c1fac7b-3605-4ca8-aab2-b0388c753a4a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4856519-a461-4b0a-80cd-a1785591d24d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""faa3eccb-90a0-4478-a756-340bba351229"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Flappy Bird
        m_FlappyBird = asset.FindActionMap("Flappy Bird", throwIfNotFound: true);
        m_FlappyBird_Flap = m_FlappyBird.FindAction("Flap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Flappy Bird
    private readonly InputActionMap m_FlappyBird;
    private List<IFlappyBirdActions> m_FlappyBirdActionsCallbackInterfaces = new List<IFlappyBirdActions>();
    private readonly InputAction m_FlappyBird_Flap;
    public struct FlappyBirdActions
    {
        private @FlappyBirdInputs m_Wrapper;
        public FlappyBirdActions(@FlappyBirdInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Flap => m_Wrapper.m_FlappyBird_Flap;
        public InputActionMap Get() { return m_Wrapper.m_FlappyBird; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlappyBirdActions set) { return set.Get(); }
        public void AddCallbacks(IFlappyBirdActions instance)
        {
            if (instance == null || m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Add(instance);
            @Flap.started += instance.OnFlap;
            @Flap.performed += instance.OnFlap;
            @Flap.canceled += instance.OnFlap;
        }

        private void UnregisterCallbacks(IFlappyBirdActions instance)
        {
            @Flap.started -= instance.OnFlap;
            @Flap.performed -= instance.OnFlap;
            @Flap.canceled -= instance.OnFlap;
        }

        public void RemoveCallbacks(IFlappyBirdActions instance)
        {
            if (m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlappyBirdActions instance)
        {
            foreach (var item in m_Wrapper.m_FlappyBirdActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlappyBirdActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlappyBirdActions @FlappyBird => new FlappyBirdActions(this);
    public interface IFlappyBirdActions
    {
        void OnFlap(InputAction.CallbackContext context);
    }
}
